openapi: 3.0.3
info:
  title: Social Microblog API
  version: 1.0.0
  description: >
    A feature-rich microblogging API built with Node.js, TypeScript, Sequelize, and PostgreSQL.
    Includes authentication, user profiles, posts, follows, likes, notifications, etc.

servers:
  - url: http://localhost:8080/api/v1
    description: Development server
  - url: https://mini-social-api.onrender.com/api/v1
    description: Production server

tags:
  - name: Auth
    description: User authentication and token management
  - name: Users
    description: Public and authenticated user profile operations
  - name: Follows
    description: Follow and unfollow other users
  - name: Posts
    description: Create, update, delete, reply and fetch posts
  - name: Replies
    description: Reply to a post, fetch all replies posts
  - name: Likes
    description: Like and unlike posts
  - name: Notifications
    description: Read and list notifications

paths:
  /auth/register:
    post:
      tags: [Auth]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password, username]
              properties:
                email:
                  type: string
                password:
                  type: string
                username:
                  type: string
      responses:
        '201':
          description: User registered
        '400':
          description: Validation error

  /auth/register/admin:
    post:
      tags: [Auth]
      summary: Register a new admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password, username]
              properties:
                email:
                  type: string
                password:
                  type: string
                username:
                  type: string
      responses:
        '201':
          description: Admin registered
        '403':
          description: Forbidden

  /auth/login:
    post:
      tags: [Auth]
      summary: Login with credentials
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Authenticated
        '401':
          description: Invalid credentials

  /auth/refresh:
    post:
      tags: [Auth]
      summary: Refresh access token
      responses:
        '200':
          description: Token refreshed
        '403':
          description: Invalid refresh token
  /users/profile/public/{username}:
    get:
      tags: [Users]
      summary: Get public profile of a user
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Public user profile
        '404':
          description: User not found

  /users/all:
    get:
      tags: [Users]
      summary: Get list of all users (Admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
        '403':
          description: Forbidden

  /users/me:
    get:
      tags: [Users]
      summary: Get a single user by ID      
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User details
        '404':
          description: User not found

    delete:
      tags: [Users]
      summary: Delete a user (Admin only)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        '204':
          description: User deleted
        '403':
          description: Forbidden

  /users/{id}/role:
    patch:
      tags: [Users]
      summary: Update user role (Admin only)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [role]
              properties:
                role:
                  type: string
                  enum: [user, admin]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Role updated

  /users/search:
    get:
      tags: [Users]
      summary: Search users by username or email
      parameters:
        - in: query
          name: q
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Matching users

  /users/me:
    patch:
      tags: [Users]
      summary: Update current user profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bio:
                  type: string
                avatar:
                  type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Profile updated

  /users/me/avatar:
    patch:
      tags: [Users]
      summary: Upload or update avatar
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Avatar uploaded

  /users/me/password:
    patch:
      tags: [Users]
      summary: Change user password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [currentPassword, newPassword]
              properties:
                currentPassword:
                  type: string
                newPassword:
                  type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Password changed
        '400':
          description: Invalid current password
  /follows/{id}:
    post:
      tags: [Follows]
      summary: Follow a user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 2
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully followed the user
        '400':
          description: Already following or invalid user
        '401':
          description: Unauthorized

    delete:
      tags: [Follows]
      summary: Unfollow a user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 2
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully unfollowed the user
        '401':
          description: Unauthorized
        '404':
          description: User not found

  /follows/{id}/followers:
    get:
      tags: [Follows]
      summary: Get followers of a user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of followers
        '401':
          description: Unauthorized

  /follows/{id}/following:
    get:
      tags: [Follows]
      summary: Get users followed by this user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of followings
        '401':
          description: Unauthorized
  /posts:
    get:
      tags: [Posts]
      summary: Get posts by user (with optional filter/pagination)
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: content
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of posts
    post:
      tags: [Posts]
      summary: Create a new post
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [content]
              properties:
                content:
                  type: string
                  maxLength: 280
                mediaUrl:
                  type: string
      responses:
        '201':
          description: Post created
        '400':
          description: Validation error
        '401':
          description: Unauthorized
  /posts/timeline:
    get:
      tags: [Posts]
      summary: Get paginated list of all posts with filter option by authorId and content
      security:
        - bearerAuth: []      
      responses:
        '200':
          description: Post found
        '404':
          description: Post not found
  /posts/{id}:
    get:
      tags: [Posts]
      summary: Get a single post by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Post found
        '404':
          description: Post not found

    patch:
      tags: [Posts]
      summary: Update a post (owner or admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  optional: true
                mediaUrl:
                  type: string
                  optional: true
      responses:
        '200':
          description: Post updated
        '403':
          description: Forbidden
        '404':
          description: Post not found

    delete:
      tags: [Posts]
      summary: Delete a post (owner or admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Post deleted
        '403':
          description: Forbidden
        '404':
          description: Post not found

  /posts/{parentId}/replies:
    post:
      tags: [Replies]
      summary: Reply to a post (flat or nested)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: parentId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [content]
              properties:
                content:
                  type: string
      responses:
        '201':
          description: Reply created
        '400':
          description: Validation error
        '404':
          description: Parent post not found

    get:
      tags: [Replies]
      summary: Get flat replies for a post
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: parentId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of replies

  /posts/{postId}/replies:
    get:
      tags: [Replies]
      summary: Get nested replies for a post
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Nested reply tree
  /likes/posts/{postId}/like:
    post:
      tags: [Likes]
      summary: Toggle like on a post (like/unlike)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Like toggled (liked or unliked)
        '401':
          description: Unauthorized
        '404':
          description: Post not found

  /likes/posts/{postId}/likes:
    get:
      tags: [Likes]
      summary: Get list of users who liked a post
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: integer
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of users who liked the post
        '401':
          description: Unauthorized
        '404':
          description: Post not found
  /notifications:
    get:
      tags: [Notifications]
      summary: List all notifications for the authenticated user
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: A list of notifications
        '401':
          description: Unauthorized

  /notifications/{id}/read:
    patch:
      tags: [Notifications]
      summary: Mark a notification as read
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Notification marked as read
        '401':
          description: Unauthorized
        '404':
          description: Notification not found
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        username:
          type: string
        bio:
          type: string
          nullable: true
        avatar:
          type: string
          nullable: true
        role:
          type: string
          enum: [user, admin]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Post:
      type: object
      properties:
        id:
          type: integer
        content:
          type: string
        mediaUrl:
          type: string
          nullable: true
        authorId:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        parentId:
          type: integer
          nullable: true

    Follow:
      type: object
      properties:
        followerId:
          type: integer
        followingId:
          type: integer
        createdAt:
          type: string
          format: date-time

    Like:
      type: object
      properties:
        userId:
          type: integer
        postId:
          type: integer
        createdAt:
          type: string
          format: date-time

    Notification:
      type: object
      properties:
        id:
          type: integer
        recipientId:
          type: integer
        type:
          type: string
          enum: [like, follow, comment]
        message:
          type: string
        isRead:
          type: boolean
        createdAt:
          type: string
          format: date-time

    AuthTokens:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
        error:
          type: string
